#!perl

# PODNAME: marpairi

# ABSTRACT: Dumper IRI parsing result

# VERSION

# AUTHORITY

use strict;
use warnings FATAL => 'all';
#
# We have a strong dependency on MarpaX::Role::Parameterized::ResourceIdentifier
# and instead of repeating its version in all .pm, I do it once for all here
#
use MarpaX::Role::Parameterized::ResourceIdentifier 0.002;

package myOptions;
use Moo;
use MooX::Options protect_argv => 0;

option 'raw'             => ( is => 'ro', default => sub { 1 },  doc => 'Raw parse value. Default is on. ' );
option 'normalized'      => ( is => 'ro', default => sub { 0 },  doc => 'Normalized parse value. Default is off.' );
option 'escaped'         => ( is => 'ro', default => sub { 0 },  doc => 'Escaped parse value. Default is off.' );
option 'unescaped'       => ( is => 'ro', default => sub { 0 },  doc => 'Unescaped parse value. Default is off.' );
option 'converted'       => ( is => 'ro', default => sub { 0 },  doc => 'URI-converted parse value. Default is off.' );
option 'trace_terminals' => ( is => 'ro', default => sub { 0 },  doc => 'Trace terminals seen when parsing. Default is off.' );
option 'trace_values'    => ( is => 'ro', default => sub { 0 },  doc => 'Trace parse tree evaluation. Default is off.' );

package main;
use myOptions;
use Log::Any qw/$log/;
use Log::Any::Adapter;
use Log::Log4perl qw/:easy/;
use MarpaX::RFC::RFC3987;
use Data::Dumper;
use POSIX qw/EXIT_SUCCESS/;

my $opt = myOptions->new_with_options;

my $defaultLog4perlConf = <<DEFAULT_LOG4PERL_CONF;
log4perl.rootLogger              = TRACE, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.layout  = PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %-5p %6P %m{chomp}%n
DEFAULT_LOG4PERL_CONF
Log::Log4perl::init(\$defaultLog4perlConf);
Log::Any::Adapter->set('Log4perl');

binmode STDOUT, ":encoding(utf8)";
binmode STDERR, ":encoding(utf8)";

foreach (@ARGV) {
    no warnings 'once';
    local $MarpaX::RI::MARPA_TRACE_TERMINALS = $opt->trace_terminals;
    local $MarpaX::RI::MARPA_TRACE_VALUES    = $opt->trace_values;
    local $Data::Dumper::Terse               = 1;
    local $Data::Dumper::Sortkeys            = 1;

    my $ri = MarpaX::RFC::RFC3987->new(@ARGV);
    foreach (qw/raw normalized escaped unescaped converted/) {
        my $what = $_;
        next if ! $opt->can($what);
        next if ! $opt->$what;
        my $meth = "_${what}_struct";
        next if ! $ri->can($meth);
        #
        # Just because I do not want the blessing to appear in the dump
        #
        my %struct = %{$ri->$meth};
        print Dumper(\%struct);
    }
}

exit(EXIT_SUCCESS);

__END__

=head1 NAME

marpairi - IRI dissection

=head1 SYNOPSIS

marpairi [options] [iri ...]

=head1 OPTIONS

=over 8

=item B<--help>

Help

=item B<--man>

Man page

=back

Please refer to the DESCRIPTION section below for the other options.

=head1 DESCRIPTION

B<marpairi> will dissect IRIs given on the command-line, following RFC3987 spec, and dump the resulting parse tree value.

Every IRI must obey at least to a "common" syntax, then eventually a "generic syntax", then eventually a "scheme specific syntax". Please refer to SCHEME SPECIFIC SUPPORT.

Each syntax provide or overwrite some components. Some scheme specific grammars may set a default value for components, and add new components. The parsing result is splitted in five explicit categories:

=over 8

=item B<--raw>

The original input, parsed as-is.

=item B<--normalized>

Components are normalized when necessary.

=item B<--escaped>

Components are percent-encoded when necessary.

=item B<--unescaped>

Components are percent-decoded when necessary.

=item B<--converted>

Components are converted to a URI compatible syntax.

=back

Extra debugging is provided via the following options:

=over 8

=item B<--trace_terminals>

All terminals are traced during parsing, for every grammar (common and/or generic, specific).

=item B<--trace_values>

All parse tree values are traced during evaluation, for every grammar (common and/or generic, specific).

=back

=head1 SCHEME SPECIFIC SUPPORT

The following schemes are explicitely supported:

=over 8

=item B<ftp>

=item B<http>

=item B<https>

=item B<ldap>

=item B<ldaps>

=back

Any other scheme will fall back into the generic syntax when possible, or the common syntax.

=head1 SEE ALSO

L<Uniform Resource Identifier (URI): Generic Syntax|https://tools.ietf.org/html/rfc3986>

L<The 'ftp' URI Scheme|https://tools.ietf.org/html/draft-yevstifeyev-ftp-uri-scheme-08>

L<http uri|https://httpwg.github.io/specs/rfc7230.html#http.uri>

L<https uri|https://httpwg.github.io/specs/rfc7230.html#https.uri>

L<Lightweight Directory Access Protocol (LDAP): Uniform Resource Locator|https://tools.ietf.org/html/rfc4516>

L<MarpaX::RFC::RFC3986>

=cut
