#!perl
use strict;
use warnings FATAL => 'all';
use Log::Any qw/$log/;
use Log::Any::Adapter;
use Log::Log4perl qw/:easy/;
use MarpaX::RFC::RFC3987;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;
use POSIX qw/EXIT_SUCCESS/;

my $man = 0;
my $help = 0;
GetOptions(
           'help|?' => \$help,
           man => \$man) || pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitval => EXIT_SUCCESS, -verbose => 2) if $man;

my $defaultLog4perlConf = <<DEFAULT_LOG4PERL_CONF;
log4perl.rootLogger              = TRACE, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.layout  = PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %-5p %6P %m{chomp}%n
DEFAULT_LOG4PERL_CONF
Log::Log4perl::init(\$defaultLog4perlConf);
Log::Any::Adapter->set('Log4perl');

binmode STDOUT, ":encoding(utf8)";
binmode STDERR, ":encoding(utf8)";

foreach (@ARGV) {
  local $MarpaX::RI::MARPA_TRACE_TERMINALS = 1;
  my $ri = MarpaX::RFC::RFC3987->new(@ARGV);
  print STDERR Dumper($ri);
}

exit(EXIT_SUCCESS);

__END__

=head1 NAME

marpairi - IRI dissection

=head1 SYNOPSIS

marpairi [options] [iri ...]

Options:

  --help            Short help
  --man             Full documentation

=head1 OPTIONS

=over 8

=item B<--help>
=item B<--man>

=back

Please refer to the DESCRIPTION section for the other options.

=head1 DESCRIPTION

B<This program> will dissect IRIs given on the command-line, following RFC3987 spec. Every IRI must obey at least to a "common" syntax, then eventually a "generic syntax", then eventually a "scheme specific syntax". Each syntax provide or overwrite some components. Some scheme specific grammars may set a default value for components. The parsing result is splitted in five explicit categories:

=over 8

=item B<--raw>

The input is parsed as-is.

=item B<--normalized>

Components are normalized when necessary.

=item B<--escaped>

Components are percent-encoded when necessary.

=item B<--unescaped>

Components are percent-decoded when necessary.

=item B<--converted>

Components are converted to a URI compatible syntax.

=back

=over 8

=item B<common syntax>

=over 8

=item B<--scheme>

=item B<--opaque>

=item B<--fragment>

=back

=back

When an IRI obey to a "generic" grammar, then the following components are available:

=over 8

=item B<generic syntax>

=over 8

=item B<--hier_part>

=item B<--query>

=item B<--segment>

=item B<--authority>

=item B<--path>

=item B<--relative_ref>

=item B<--relative_part>

=item B<--userinfo>

=item B<--host>

=item B<--port>

=item B<--ip_literal>

=item B<--ipv4_address>

=item B<--reg_name>

=item B<--ipv6_address>

=item B<--ipv6_addrz>

=item B<--ipvfuture>

=item B<--zoneid>

=item B<--segments>

=back

=back

Then, scheme specific grammars, may provide more information. The following explicit scheme extensions are hereby provided:

=over 8

=item B<ftp>

=over 8

=item B<--user>

=item B<--password>

=item B<--typecode>

=item B<--cwd_part>

=item B<--last_segment>

=back

=item B<ldap>

=over 8

=item B<--dn>

=item B<--question>

=item B<--attributes>

=item B<--attrdesc>

=item B<--scope>

=item B<--filter>

=item B<--extensions>

=item B<--extension>

=back

=back

The following schemes provide no extension, but are just a grammar restriction:

=over 8

=item B<http>

=item B<https>

=item B<ldaps>

=back

Extra debugging is provided via the following options:

=over 8

=item B<--trace_terminals>

All terminals are traced during parsing, for every grammar (common and/or generic, specific).

=item B<--trace_values>

All parse tree values are traced during evaluation, for every grammar (common and/or generic, specific).

=back

=head1 SEE ALSO

L<Uniform Resource Identifier (URI): Generic Syntax|https://tools.ietf.org/html/rfc3986>

L<The 'ftp' URI Scheme|https://tools.ietf.org/html/draft-yevstifeyev-ftp-uri-scheme-08>

L<http uri|https://httpwg.github.io/specs/rfc7230.html#http.uri>

L<https uri|https://httpwg.github.io/specs/rfc7230.html#https.uri>

L<Lightweight Directory Access Protocol (LDAP): Uniform Resource Locator|https://tools.ietf.org/html/rfc4516>

L<MarpaX::RFC::RFC3986>

=cut
